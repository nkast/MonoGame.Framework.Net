<?xml version="1.0"?>
<project name="MonoGame Build Script" default="build" basedir=".">

  <description>The MonoGame automated build script.</description>

  <property name="os" value="${operating-system::get-platform(environment::get-operating-system())}" />
  <property name="msbuild12win" value="C:\Program Files (x86)\MSBuild\12.0\Bin\msbuild.exe" />
  <property name="msbuild14win" value="C:\Program Files (x86)\MSBuild\14.0\Bin\msbuild.exe" />
  <property name="msbuild15win" value="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\msbuild.exe" />
  <property name="msbuild16win" value="C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\msbuild.exe" />
  <property name="msbuildUAPwin" value="C:\Program Files (x86)\MSBuild\14.0\Bin\msbuild.exe" />
  <!--
  <property name="msbuildwin" value="C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\msbuild.exe" />
  -->
  <property name="msbuildwin" value="C:\Program Files (x86)\MSBuild\14.0\Bin\msbuild.exe" />
  
  <!-- Helper default target. -->
  <target   name="build" 
            description="Build, run tests, generate docs, and create installers." 
            depends="build_code,build_docs" />

  <!-- Some additional helper dependencies. -->
  <target name="_default" depends="_checkos" />
  <target name="_prebuild" depends="_default,_clean" />

  <!-- Do some OS checks required by the other steps. -->
  <target name="_checkos">
    <property name="os" value="${operating-system::get-platform(environment::get-operating-system())}"/>
    <if test="${os == 'Unix'}">
      <if test="${directory::exists('/Applications') and directory::exists('/Library')}">
        <property name="os" value="MacOS"/>
      </if>
    </if>
    <echo message="Detected : ${os}"/>
  </target>

  <!-- Clean the build output directories. -->
  <target name="_clean">
    <delete dir="${project::get-base-directory()}\MonoGame.Framework\obj" />
    <delete dir="${project::get-base-directory()}\MonoGame.Framework.Content.Pipeline\obj" />
  </target>
  
  <!-- Shortcut for building all valid target platforms -->
  <target name="build_code" description="Build all the projects.">
    <call target="build_windows"/>
    <call target="build_windows8" />
    <call target="build_windowsphone" />
    <call target="build_windowsphone81" />
    <call target="build_windows10" />
    <call target="build_linux"/>
    <call target="build_android" />
    <call target="build_mac" />
    <call target="build_ios" />
  </target>
 


  <!-- Build targets for the various platforms. -->

  <target name="build_windows" description="Build Windows" depends="_prebuild">
    <if test="${os == 'Win32NT'}">
    
      <exec program="${msbuildwin}" commandline="MonoGame.Framework.Windows.sln /t:Clean /p:Configuration=Release" />
      <exec program="${msbuildwin}" commandline="MonoGame.Framework.Windows.sln /t:Build /p:Configuration=Release" />
      
      <exec program="${msbuildwin}" commandline="MonoGame.Framework.WindowsGL.sln /t:Clean /p:Configuration=Release" />
      <exec program="${msbuildwin}" commandline="MonoGame.Framework.WindowsGL.sln /t:Build /p:Configuration=Release" />
      <call target="build_portable"/>
    </if>
    <if test="${os == 'Unix'}">
      
      <exec program="msbuild" commandline="MonoGame.Framework.Windows.sln /t:Clean /p:Configuration=Release" />
      <exec program="msbuild" commandline="MonoGame.Framework.Windows.sln /t:Build /p:Configuration=Release" />
      
      <exec program="msbuild" commandline="MonoGame.Framework.WindowsGL.sln /t:Clean /p:Configuration=Release" />
      <exec program="msbuild" commandline="MonoGame.Framework.WindowsGL.sln /t:Build /p:Configuration=Release" />
    </if>
  </target>

  <target name="build_portable" description="Build Portable" depends="_prebuild">
	
    <!-- Convert MonoGame.Framework.Net.dll -->
    <copy file="MonoGame.Framework.Net\bin\Windows\AnyCPU\Release\MonoGame.Framework.Net.dll" tofile="MonoGame.Framework.Net\bin\Portable\AnyCPU\temp.dll" overwrite="true"/>
    <exec program="ThirdParty\Piranha\Piranha.exe " workingdir="MonoGame.Framework.Net\bin\Portable\AnyCPU" commandline='make-portable-skeleton -i temp.dll -o MonoGame.Framework.Net.dll -p ".NETPortable,Version=v4.0,Profile=Profile328"' />
    <delete file="MonoGame.Framework.Net\bin\Portable\AnyCPU\temp.dll" />

  </target>

  <target name="build_linux" description="Build Linux" depends="_prebuild">
    <if test="${os == 'Win32NT'}">
      
      <exec program="${msbuildwin}" commandline="MonoGame.Framework.Linux.sln /t:Clean /p:Configuration=Release" />
      <exec program="${msbuildwin}" commandline="MonoGame.Framework.Linux.sln /t:Build /p:Configuration=Release" />
    </if>
    <if test="${os == 'Unix'}">
      
      <exec program="msbuild" commandline="/t:Clean /p:Configuration=Release MonoGame.Framework.Linux.sln" />
      <exec program="msbuild" commandline="/t:Build /p:Configuration=Release MonoGame.Framework.Linux.sln" />
    </if>
    <if test="${os == 'MacOS'}">
      
      <exec program="msbuild" commandline="MonoGame.Framework.Linux.sln /t:Clean /p:Configuration=Release" />
      <exec program="msbuild" commandline="MonoGame.Framework.Linux.sln /t:Build /p:Configuration=Release" />
      
      <!--  
        The Linux build is considered the DesktopGL build.  For this 
        reason need the Mac ffmpeg binaries to be able to run the 
        Linux unit tests on a Mac system.
      -->
      <copy file="ThirdParty/Dependencies/ffmpeg/MacOS/ffmpeg" tofile="Test/bin/Linux/AnyCPU/Debug/ffmpeg" overwrite="true"/>
      <copy file="ThirdParty/Dependencies/ffmpeg/MacOS/ffprobe" tofile="Test/bin/Linux/AnyCPU/Debug/ffprobe" overwrite="true"/>
            
    </if>
  </target>

  <target name="build_mac" description="Build MacOS" depends="_prebuild">
    <if test="${os == 'MacOS'}">
      
      <exec program="msbuild" commandline="MonoGame.Framework.MacOS.sln  /t:Clean /p:Configuration=Release" />
      <exec program="msbuild" commandline="MonoGame.Framework.MacOS.sln  /t:Build /p:Configuration=Release" />
    </if>
  </target>

  <target name="build_ios" description="Build iOS" depends="_prebuild">
    <if test="${os == 'MacOS'}">
      <if test="${file::exists('/Developer/MonoTouch/MSBuild/Xamarin.ObjcBinding.CSharp.targets') or file::exists('/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Xamarin.ObjcBinding.CSharp.targets')}">
        
        <exec program="msbuild" commandline="MonoGame.Framework.iOS.sln /t:Clean /p:Configuration=Release" />
        <exec program="msbuild" commandline="MonoGame.Framework.iOS.sln /t:Build /p:Configuration=Release" />
      </if>
      <if test="${file::exists('/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/TVOS/Xamarin.TVOS.CSharp.targets')}" >
        
        <exec program="msbuild" commandline="MonoGame.Framework.tvOS.sln /t:Clean /p:Configuration=Release" />
        <exec program="msbuild" commandline="MonoGame.Framework.tvOS.sln /t:Build /p:Configuration=Release" />
      </if>
    </if>
  </target>

  <target name="build_android" description="Build Android" depends="_prebuild">
    <if test="${os == 'Win32NT'}">
      <if test="${file::exists('C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\Novell\Novell.MonoDroid.CSharp.targets')}">
        
        <exec program="${msbuild15win}" commandline="MonoGame.Framework.Android.sln /t:Clean /p:Configuration=Release" />
        <exec program="${msbuild15win}" commandline="MonoGame.Framework.Android.sln /t:Build /p:Configuration=Release" />
      </if>
    </if>
    <if test="${os == 'MacOS'}">
      <if test="${file::exists('/Developer/MonoAndroid/usr/bin/mandroid')}">
        
        <exec program="msbuild" commandline="MonoGame.Framework.Android.sln /t:Clean /p:Configuration=Release" />
        <exec program="msbuild" commandline="MonoGame.Framework.Android.sln /t:Build /p:Configuration=Release" />
      </if>
    </if>
  </target>

  <target name="build_windows8" description="Build Windows 8" depends="_prebuild">
    <if test="${os == 'Win32NT'}">
      
      <exec program="msbuild " commandline="MonoGame.Framework.Windows8.sln /t:Clean /p:Configuration=Release" />
      <exec program="msbuild " commandline="MonoGame.Framework.Windows8.sln /t:Build /p:Configuration=Release" />
    </if>
  </target>

  <target name="build_windowsphone" description="Build Windows Phone" depends="_prebuild">
    <if test="${os == 'Win32NT'}">
      <if test="${file::exists('c:\Program Files (x86)\MSBuild\Microsoft\WindowsPhone\v8.0\Microsoft.Cpp.WindowsPhone.8.0.targets')}">
        
        <exec program="msbuild " commandline='MonoGame.Framework.WindowsPhone.sln /t:Clean /p:Configuration=Release /p:Platform="ARM"' />
        <exec program="msbuild " commandline='MonoGame.Framework.WindowsPhone.sln /t:Build /p:Configuration=Release /p:Platform="ARM"' />
        <exec program="msbuild " commandline='MonoGame.Framework.WindowsPhone.sln /t:Clean /p:Configuration=Release /p:Platform="x86"' />
        <exec program="msbuild " commandline='MonoGame.Framework.WindowsPhone.sln /t:Build /p:Configuration=Release /p:Platform="x86"' />
      </if>
    </if>
  </target>

  <target name="build_windowsphone81" description="Build Windows Phone 8.1" depends="_prebuild">
    <if test="${os == 'Win32NT'}">
      <if test="${file::exists('c:\Program Files (x86)\MSBuild\Microsoft\WindowsPhone\v8.1\Microsoft.Cpp.WindowsPhone.8.1.targets')}">
        
        <exec program="${msbuild12win}" commandline='MonoGame.Framework.WindowsPhone81.sln /t:Clean /p:Configuration=Release /p:Platform="Any CPU"' />
        <exec program="${msbuild12win}" commandline='MonoGame.Framework.WindowsPhone81.sln /t:Build /p:Configuration=Release /p:Platform="Any CPU"' />
      </if>
    </if>
  </target>

  <target name="build_windows10" description="Build Windows 10 UAP" depends="_prebuild">
    <if test="${os == 'Win32NT'}">
      <!-- disable build of v16 project
      <exec program="${msbuildwin}" commandline='MonoGame.Framework\MonoGame.Framework.WindowsUniversal.csproj /t:Restore /p:Configuration=Release' />
      <exec program="${msbuildwin}" commandline='MonoGame.Framework\MonoGame.Framework.WindowsUniversal.csproj /p:Configuration=Release' />
      -->

      <if test="${file::exists('c:\Program Files (x86)\MSBuild\Microsoft\WindowsXaml\v14.0\Microsoft.Windows.UI.Xaml.CSharp.targets')}">

        <!--
            Currently MSBuild doesn't restore the nuget packages like buiding from the
            IDE does.  So we have to do it ourselves using the recommended work around.
        -->
        <exec program="${nuget3path}/nuget.exe " commandline='restore MonoGame.Framework.Net\MonoGame.Framework.Net.WindowsUniversal.project.json -NonInteractive' />

        <!-- build of v14 project -->
        <exec program="${msbuildUAPwin}" commandline='MonoGame.Framework.WindowsUniversal.sln /t:Clean /p:Configuration=Release /p:Platform="Any CPU"' />
        <exec program="${msbuildUAPwin}" commandline='MonoGame.Framework.WindowsUniversal.sln /t:Build /p:Configuration=Release /p:Platform="Any CPU"' />

      </if>
    </if>
  </target>


  <!-- Generate the docs... will fail if the code hasn't been built. -->
  <target name="build_docs" description="Build the documentation." depends="_default">
    <if test="${os == 'Win32NT' and '$runbuilddocs'=='true'}">
      <delete dir="${project::get-base-directory()}\Documentation\Output" />
      <exec program="SharpDoc.exe" basedir="ThirdParty\Dependencies\SharpDoc" commandline="-config Documentation\config.xml" />
    </if>
  </target>


</project>
